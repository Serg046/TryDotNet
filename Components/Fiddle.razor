@using BlazorMonaco
@using Microsoft.CodeAnalysis;
@using Microsoft.CodeAnalysis.CSharp;
@using System.Runtime.Loader;
@inherits MvvmComponent<FiddleViewModel>
@inject IRoslynService RoslynService

<div class="editor">
    <MonacoEditor @ref="_editor" ConstructionOptions="EditorConstructionOptions" />
</div>
<div class="button-container">
    <div class="button" @onclick="Run">Run</div>
    <div class="button" @onclick="Reset">Reset</div>
</div>
<div class="console">
    @_output
</div>

@code {
    private string? _output;
    private MonacoEditor? _editor = null;
    private MonacoEditor Editor => _editor ?? throw new MissingMemberException("Cannot find the editor");

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
        => new() { Language = "csharp", Value = DataContext.InitialCode };

    private async void Run()
    {
        _output = await RoslynService.CompileAndRun(await Editor.GetValue());
        StateHasChanged();
    }

    private async void Reset()
    {
        await Editor.SetValue(DataContext.InitialCode);
        _output = null;
        StateHasChanged();
    }

    private class CollectibleAssemblyLoadContext : AssemblyLoadContext
    {
        public CollectibleAssemblyLoadContext() : base(isCollectible: true)
        {
        }
    }
}
